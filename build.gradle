/*
 * Copyright 2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import org.gradle.internal.jvm.Jvm

buildscript {
    repositories {
        jcenter()
        mavenLocal()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    apply from: file('gradle/buildscript.gradle'), to: buildscript

}

plugins {
    id "ru.vyarus.github-info" version "1.1.0"
    id "com.github.ben-manes.versions" version "0.13.0"
    id "net.nemerosa.versioning" version "2.5.0"
    id "org.sonarqube" version "2.2.1"
    id "de.gliderpilot.semantic-release" version "1.2.0"
}

github {
    user "ReneNeubert"
    license "Apache"
}


ext {

    githubProjectName = rootProject.name
    // Change if github project name is not the same as the root project's name
    isSnapshot = version.toString().endsWith("-SNAPSHOT")
    isTravis = System.getenv("TRAVIS") != null
    isCi = isTravis
    jvm = Jvm.current()
    javaVersion = JavaVersion.current()
    isCi = false //TODO
    isWindows = org.gradle.internal.os.OperatingSystem.current().windows

    // module configuration
    publishedModules = ["template-client", "template-server"].collect {project(it)}
    noCodeModules = ["template-no-code"].collect {project(it)}

    integTestModules = publishedModules.findAll {
        !(it.name in ["template-no-code", "template-manual"])
    }

    benchmarkModules = publishedModules.findAll {
        !(it.name in ["template-no-code", "template-manual"])
    }

    apiModules = publishedModules.findAll {!(it.name in ["template-manual"])}
    sonarQubeModules = publishedModules
    generateManifest = false

    //System.properties['user.name']

    if (!javaVersion.java8Compatible) {
        throw new IllegalStateException("Must be built with Java 8 or higher")
    }
}

allprojects {
    group = "${organization}.${githubProjectName}"  // TEMPLATE: Set to organization of project
    repositories {
        jcenter()
        mavenLocal()
        mavenCentral()
    }
}

apply plugin: "com.jfrog.artifactory"
apply from: "gradle/idea/idea.gradle"
apply from: file('gradle/credentials.gradle')
apply from: file('gradle/sonarqube.gradle')
apply from: file('gradle/convention.gradle')

//apply from: file('gradle/maven.gradle')
apply from: file('gradle/check.gradle')
//apply from: file('gradle/license.gradle')
//apply from: file('gradle/release.gradle')

subprojects {

    if (plugins.hasPlugin(JavaPlugin) || plugins.hasPlugin(GroovyPlugin)) {
        dependencies {
            afterEvaluate {
                compile 'javax.ws.rs:jsr311-api:1.1.1'
                compile 'com.sun.jersey:jersey-core:1.11'
                testCompile 'org.testng:testng:6.1.1'
                testCompile 'org.mockito:mockito-core:1.8.5'
            }

        }
    }
}

artifactoryPublish.skip true

semanticRelease {
    repo {
        ghToken = project.ext.ghToken
        releaseAsset aggregateJar, contentType: 'application/zip'
        releaseAsset aggregateSourcesJar, label: 'the sources of the project', contentType:
                'application/zip'
        releaseAsset aggregateJavadocJar, label: 'the javadoc of the project', contentType:
                'application/zip'
    }
}
